/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clipcap;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.ClipboardOwner;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.awt.event.KeyEvent;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import java.util.regex.Pattern;
import java.util.regex.Matcher;


/**
 * Will edit the contents of the system clipboard to either all caps or all
 * lower case characters. The user can also specify how many of the characters
 * of the clipboard are changed. 
 * @author LRG
 */
public class ClipCapFrame extends javax.swing.JFrame implements ClipboardOwner {
    /**
     * The system clipboard.
     */
    Clipboard clipboard;

    /**
     * Creates new form ClipCapFrame
     */
    public ClipCapFrame() {
        // Get the system clipboard
        clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        
        // Initialize and display the GUI.
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonToCaps = new javax.swing.JButton();
        buttonToLower = new javax.swing.JButton();
        inverseToCaps = new java.awt.Checkbox();
        inverseToLower = new java.awt.Checkbox();
        addQuotes = new javax.swing.JButton();
        addApostrophe = new javax.swing.JButton();
        nToCaps = new javax.swing.JFormattedTextField();
        nToLower = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        clipboardPreview = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Clipboard Edit");
        setResizable(false);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        buttonToCaps.setText("To All Caps");
        buttonToCaps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonToCapsActionPerformed(evt);
            }
        });

        buttonToLower.setText("To All Lower");
        buttonToLower.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonToLowerActionPerformed(evt);
            }
        });

        inverseToCaps.setLabel("Inverse");

        inverseToLower.setLabel("Inverse");

        addQuotes.setText("Add Quotes");
        addQuotes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addQuotesActionPerformed(evt);
            }
        });

        addApostrophe.setText("Add Apostrophes");
        addApostrophe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addApostropheActionPerformed(evt);
            }
        });

        nToCaps.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        nToCaps.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        nToCaps.setToolTipText("");
        nToCaps.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        nToCaps.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                nToCapsFocusGained(evt);
            }
        });

        nToLower.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        nToLower.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        nToLower.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        nToLower.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                nToLowerFocusGained(evt);
            }
        });
        nToLower.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nToLowerActionPerformed(evt);
            }
        });

        clipboardPreview.setEditable(false);
        clipboardPreview.setColumns(20);
        clipboardPreview.setLineWrap(true);
        clipboardPreview.setRows(5);
        jScrollPane1.setViewportView(clipboardPreview);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(buttonToCaps, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(nToCaps, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(buttonToLower, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(nToLower)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(inverseToLower, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(inverseToCaps, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addQuotes, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addApostrophe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 161, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonToCaps, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inverseToCaps, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nToCaps, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonToLower, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                    .addComponent(inverseToLower, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                    .addComponent(nToLower))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addQuotes, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addApostrophe, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonToCapsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonToCapsActionPerformed
        // Try to convert the text in the To Caps field to a number.
        try { 
            // If the inverse checkbox is checked run the inverse operation.
            if(inverseToCaps.getState()) {
                clipboardToCapsInverse(new Short(nToCaps.getText())); 
            }
            else { clipboardToCaps(new Short(nToCaps.getText())); }
        }
        
        // Text in the To Caps field is not a number. Run the default operation
        // of converting all characters to caps.
        catch (NumberFormatException e) {
            if(inverseToCaps.getState()) { 
                clipboardToCapsInverse((short)0); 
            }
            else { clipboardToCaps((short)0); }
        }
    }//GEN-LAST:event_buttonToCapsActionPerformed

    private void buttonToLowerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonToLowerActionPerformed
        try { 
            // If the inverse lower checkbox is checked run the inverse operation
            if(inverseToLower.getState()) {
                clipboardToLowerInverse( new Short(nToLower.getText())); 
            }
            else {
                clipboardToLower( new Short(nToLower.getText()));
            }
            
        }
        
        // The text in the To Lower field is not a number. Run the defualt 
        // operation of all to lower.
        catch (NumberFormatException e) {
            if(inverseToLower.getState()) {
                clipboardToLowerInverse((short)0);
            }
            else { clipboardToLower((short)0); }
        }
    }//GEN-LAST:event_buttonToLowerActionPerformed

    private void addQuotesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addQuotesActionPerformed
        addQuotes();
    }//GEN-LAST:event_addQuotesActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        // This application has gained focus and the clipboard preview field
        // needs to be updated.
        updateClipboardPreview();
    }//GEN-LAST:event_formWindowGainedFocus

    private void addApostropheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addApostropheActionPerformed
        addApostrophes();
    }//GEN-LAST:event_addApostropheActionPerformed

    private void nToLowerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nToLowerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nToLowerActionPerformed

    private void nToCapsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nToCapsFocusGained
        // Clear exsisting value from the field
        nToCaps.setValue(null);
    }//GEN-LAST:event_nToCapsFocusGained

    private void nToLowerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nToLowerFocusGained
        // Clear exsisting value from the field
        nToLower.setValue(null);
    }//GEN-LAST:event_nToLowerFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClipCapFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClipCapFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClipCapFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClipCapFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClipCapFrame().setVisible(true);
            }
        });
                
    }
       
    /**
     * Converts the first n characters of the clipboard contents to capitals.
     * @param n The number of leading characters to convert to caps.  
     */
    private void clipboardToCaps(short n) {
        // Get Clipboard text contents if any
        String clipboardText = getClipboardText();
        
        if( n > 0 ) {
            //Split the string into two parts. The front is the first n number of
            // characters of the clipboard text.
            String front = clipboardText.substring(0, n);
            String end = clipboardText.substring(n, clipboardText.length());
        
            // Capitalize the first n number of chars of the clipboard text and 
            // concat the strings together again.
            front = front.toUpperCase();
            clipboardText = front.concat(end);
        }
        
        else { clipboardText = clipboardText.toUpperCase(); }
        
        // Place the edited text back onto the clipboard.
        setClipboardText(clipboardText);
    }
    
    /**
     * Converts the last n characters of the clipboard contents to capitals.
     * @param n The number of characters to convert to caps.
     */
    private void clipboardToCapsInverse(short n) {
        // Get Clipboard text contents if any
        String clipboardText = getClipboardText();
        
        if( n > 0 ) {
            //Split the string into two parts. The front is the first n number of
            // characters of the clipboard text.
            String front = clipboardText.substring(0, clipboardText.length()-n);
            String end = clipboardText.substring(clipboardText.length()-n, clipboardText.length());
        
            // Lowerize the first n number of chars of the clipboard text and 
            // concat the strings together again.
            end = end.toUpperCase();
            clipboardText = front.concat(end);
        }
        
        else { clipboardText = clipboardText.toUpperCase(); }
        
        // Place the edited text back onto the clipboard.
        setClipboardText(clipboardText);
    }
    
    /**
     * Converts the first n characters of the clipboard contents to lower case.
     * @param n The number of leading characters to convert to lower case.
     */
    private void clipboardToLower(short n) {
        // Get Clipboard text contents if any
        String clipboardText = getClipboardText();
        
        if( n > 0 ) {
            //Split the string into two parts. The front is the first n number of
            // characters of the clipboard text.
            String front = clipboardText.substring(0, n);
            String end = clipboardText.substring(n, clipboardText.length());
        
            // Lowerize the first n number of chars of the clipboard text and 
            // concat the strings together again.
            front = front.toLowerCase();
            clipboardText = front.concat(end);
        }
        
        else { clipboardText = clipboardText.toLowerCase(); }
        
        // Place the edited text back onto the clipboard.
        setClipboardText(clipboardText);
    }
    
    /**
     * Converts the last n characters of the clipboard contents to lower case.
     * @param n The number of characters to convert to lower case.
     */
    private void clipboardToLowerInverse(short n) {
        // Get Clipboard text contents if any
        String clipboardText = getClipboardText();
        
        if( n > 0 ) {
            //Split the string into two parts. The front is the first n number of
            // characters of the clipboard text.
            String front = clipboardText.substring(0, clipboardText.length()-n);
            String end = clipboardText.substring(clipboardText.length()-n, clipboardText.length());
        
            // Lowerize the first n number of chars of the clipboard text and 
            // concat the strings together again.
            end = end.toLowerCase();
            clipboardText = front.concat(end);
        }
        
        else { clipboardText = clipboardText.toLowerCase(); }
        
        // Place the edited text back onto the clipboard.
        setClipboardText(clipboardText);
    }
    
    /** Implementation of the ClipboardOwner method for taking action
     * when ownership of the clipboard is lost.
     * @param cb Reference to the clipboard from which ownership was lost.
     * @param t The contents that was in the clipboard before it was changed by 
     * another owner.
     */
    public void lostOwnership(Clipboard cb, Transferable t) {
        // Nothing is done when the clipboard changes owner.
        return;
    }
    
    /**
     * Updates the clipboard preview text field with the current contents of the
     * clipboard.
     */
    private void updateClipboardPreview() {
        // This application has gained focus again. It can claim ownership of
        // the clipboard and update the clipboard preview text field.
        clipboardPreview.setText(getClipboardText());
    }
    
    /**
     * Gets the contents of the clipboard and returns it as a string. If the
     * contents are something other than a string an empty string will be 
     * returned.
     * @return The contents of the clipboard as a string.
     */
    private String getClipboardText() {
        // Get Clipboard text contents if any
        Transferable content = clipboard.getContents(null);
        String clipboardText = "";
        try {
            if( content != null && 
                    content.isDataFlavorSupported(DataFlavor.stringFlavor)) {
                clipboardText = (String)content.getTransferData(DataFlavor.stringFlavor);
            }
        }
        
        catch (IOException | UnsupportedFlavorException e) {
            // The clipboard can not be read or the contents are something 
            // other than text. Just return a empty stirng.
            return clipboardText;
        }
        
        return clipboardText;
    }
    
    /**
     * Sets the clipboard contents to the specified string.
     * @param newContents What to set the clipboard contents to.
     */
    private void setClipboardText(String newContents) {
        clipboard.setContents(new StringSelection(newContents), this);
        updateClipboardPreview();
    }
    
    /**
     * Adds double quotes to the contents of the clipboard
     */
    private void addQuotes() {
        setClipboardText("\"" + getClipboardText() + "\"");
    }
    
    /**
     * Adds apostrophes to the clipboard text.
     */
    private void addApostrophes() {
        setClipboardText("\'" + getClipboardText() + "\'");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addApostrophe;
    private javax.swing.JButton addQuotes;
    private javax.swing.JButton buttonToCaps;
    private javax.swing.JButton buttonToLower;
    private javax.swing.JTextArea clipboardPreview;
    private java.awt.Checkbox inverseToCaps;
    private java.awt.Checkbox inverseToLower;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JFormattedTextField nToCaps;
    private javax.swing.JFormattedTextField nToLower;
    // End of variables declaration//GEN-END:variables
}
